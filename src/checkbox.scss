// Checkbox Component - SCSS
// Material Design 3 checkbox

@use 'variables' as *;
@use 'mixins' as *;

// Component-specific variables
$checkbox-size: $spacing-18px;
$checkbox-touch-target-size: $spacing-40px;
$checkbox-touch-offset: calc(
  ($checkbox-touch-target-size - $checkbox-size) / 2
);
$checkbox-focus-outline-width: $spacing-2px;
$checkbox-focus-outline-offset: -$spacing-2px;

// Mixins
@mixin checkbox-outline($color) {
  outline: $checkbox-focus-outline-width solid
    light-dark(var(--color-light-#{$color}), var(--color-dark-#{$color}));
  outline-offset: $checkbox-focus-outline-offset;
}

@mixin state-overlay($color, $opacity) {
  background-color: color(
    from light-dark(var(--color-light-#{$color}), var(--color-dark-#{$color}))
      srgb r g b / #{$opacity}
  );
}

// Checkbox Component
input.checkbox {
  @include reset-input-appearance;

  margin: $checkbox-touch-offset;
  height: $checkbox-size;
  width: $checkbox-size;
  position: relative;
  border-radius: $spacing-2px;
  pointer-events: default;

  @include checkbox-outline(on-surface-variant);

  // Checkmark styling
  &::after {
    content: '';
    position: absolute;
    width: 100%;
    height: 100%;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: $checkbox-size;
    top: 0;
    left: 0;
  }

  // Touch target area
  &::before {
    content: '';
    position: absolute;
    top: -$checkbox-touch-offset;
    left: -$checkbox-touch-offset;
    right: -$checkbox-touch-offset;
    bottom: -$checkbox-touch-offset;
    border-radius: 50%;
    background-color: transparent;
  }

  // Checked state
  &:checked {
    background-color: light-dark(
      var(--color-light-primary),
      var(--color-dark-primary)
    );

    &::after {
      content: 'âœ“';
      color: light-dark(
        var(--color-light-on-primary),
        var(--color-dark-on-primary)
      );
    }
  }

  // Error/Danger variants
  &.danger,
  &.error {
    @include checkbox-outline(error);

    &:checked {
      background-color: light-dark(
        var(--color-light-error),
        var(--color-dark-error)
      );
    }
  }

  // Disabled state
  &:disabled {
    outline-color: color(
      from
        light-dark(var(--color-light-on-surface), var(--color-dark-on-surface))
        srgb r g b / #{$opacity-disabled-content}
    );
    background-color: color(
      from
        light-dark(var(--color-light-on-surface), var(--color-dark-on-surface))
        srgb r g b / #{$opacity-disabled-content}
    );
  }

  // Interactive states (enabled only)
  &:not([disabled]) {
    &::before {
      cursor: pointer;
    }

    // Focus state
    &:focus::before {
      outline: $focus-outline-width solid
        light-dark(var(--color-light-secondary), var(--color-dark-secondary));
    }

    // Hover states
    &:hover::before {
      @include state-overlay(on-surface, $opacity-hovered);
    }

    &:checked:hover::before {
      @include state-overlay(primary, $opacity-hovered);
    }

    // Active states
    &:active::before {
      @include state-overlay(on-surface, $opacity-pressed);
    }

    &:active:hover::before {
      @include state-overlay(primary, $opacity-pressed);
    }

    // Error/Danger hover and active states
    &.danger,
    &.error {
      &:hover::before {
        @include state-overlay(error, $opacity-hovered);
      }

      &:active::before {
        @include state-overlay(error, $opacity-pressed);
      }
    }
  }
}
